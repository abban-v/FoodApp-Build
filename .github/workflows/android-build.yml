name: Build Android Release APK

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Set up Node.js (use a modern Node to avoid metro/node issues)
        uses: actions/setup-node@v4
        with:
          node-version: '18.16.0'
          cache: 'npm'

      - name: Debug: show node & npm versions (CI visibility)
        run: |
          echo "which node: $(which node)"
          node -v
          npm -v
          npx --version

      - name: Clean npm cache and modules
        run: |
          npm cache clean --force
          rm -rf node_modules

      - name: Install JS dependencies
        run: npm ci

      # Pre-bundle JS assets using the Node we've set up so Gradle doesn't need to spawn node.
      # This avoids the 'configs.toReversed' error by ensuring Metro runs under the correct Node.
      - name: Pre-bundle React Native JS for Android (creates assets & res)
        run: |
          # ensure assets dir exists
          mkdir -p android/app/src/main/assets
          mkdir -p android/app/src/main/res
          npx react-native bundle \
            --platform android \
            --dev false \
            --entry-file index.js \
            --bundle-output android/app/src/main/assets/index.android.bundle \
            --assets-dest android/app/src/main/res

      - name: Install Android SDK / Build Tools / NDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 33
          build-tools: 33.0.2
          ndk: 27.1.12297006

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Build Release APK
        env:
          # Ensure Gradle uses the same node binary we configured:
          NODE_BINARY: ${{ runner.temp }}/node  # placeholder (we overwrite below)
        run: |
          # ensure gradle uses the node on PATH installed by setup-node
          export NODE_BINARY=$(which node)
          echo "NODE_BINARY -> $NODE_BINARY"

          cd android
          ./gradlew clean
          # assembleRelease will pick up the pre-bundled assets we created above
          ./gradlew assembleRelease --no-daemon --stacktrace

      - name: Upload Release APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: android/app/build/outputs/apk/release/app-release.apk
